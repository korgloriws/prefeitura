preciso de um código python que vai receber 2 arquivos 


o primeiro é um arquivo CSV separado por ; que vai ser como retirar dados para preencher uma tabela em um arquivo xls.

ambos os arquivos tem uma estrutura meio complexa e não tem colunas nem linhas parecidas , mas podemos usar a biblioteca xlwings que eu já usei em outras vezes sei que ele escreve em arquivos excell usando os referenciais de linhas e colunas do proprio excell.



no primeiro arquivo como vamos usar pra retirar dados 

podemos ler todas as linhas sem problema , não ha muita confusão.

já no segundo arquivo vamos nos limitar a ler das linhas  19 até a linha 28 , da coluna A ate a coluna M apenas da aba "RREO-Anexo 07"

por que existem outras colunas e outras linhas e outras abas que podem ser ignoradas.

uma vez sabendo qual linhas e qusis colunas e qual aba olhar , é importante dizer que há celulas mescladas.


olhando corretamente para as colunas certas dos arquivos é importante verificar o dicionário que fiz para que crie uma relação entre eles:

"DE	PARA
EXCETO INTRA/PODER EXECUTIVO	  PODER EXECUTIVO 
vr_rpp_saldo_ant	Em Exercícios Anteriores (a) 
vr_rpp_insc	Em 31 de dezembro de 2022 (b) 
vr_rpp_pag	Pagos (c)
vr_rpp_anu	Cancelados (d)
vr_rpp_a_pag	Saldo e = (a+ b) - (c + d) 
vr_rpn_saldo_ant	Em Exercícios Anteriores (f) 
vr_rpn_insc	Em 31 de dezembro de 2022 (g) 
vr_rpn_liq	Liquidados (h) 
vr_rpn_pag	Pagos (i) 
vr_rpn_anu	Cancelados (j) 
vr_rpn_a_pag	Saldo k = (f + g) - (i + j) 
EXCETO INTRA/PODER LEGISLATIVO	  PODER LEGISLATIVO
vr_rpp_saldo_ant	Em Exercícios Anteriores (a) 
vr_rpp_insc	Em 31 de dezembro de 2022 (b) 
vr_rpp_pag	Pagos (c)
vr_rpp_anu	Cancelados (d)
vr_rpp_a_pag	Saldo e = (a+ b) - (c + d) 
vr_rpn_saldo_ant	Em Exercícios Anteriores (f) 
vr_rpn_insc	Em 31 de dezembro de 2022 (g) 
vr_rpn_liq	Liquidados (h) 
vr_rpn_pag	Pagos (i) 
vr_rpn_anu	Cancelados (j) 
vr_rpn_a_pag	Saldo k = (f + g) - (i + j) "


"C2	B23
D2	C23
F2	D23
E2	E23
G2	F23
H2	G23
I2	H23
K2	I23
L2	J23
J2	K23
M2	L23
C3	B24
D3	C24
F3	D24
E3	E24
G3	F24
H3	G24
I3	H24
K3	I24
L3	J24
J3	K24
M3	L24
C4	B27
D4	C27
F4	D27
E4	E27
G4	F27
H4	G27
I4	H27
K4	I27
L4	J27
J4	K27
M4	L27"


mapeamento = {
    "C2": "B23", "D2": ", "F2": "D23", "E2": "E23",
    "G2": "F23", "H2": "G23", "I2": "H23", "K2": "I23",
    "L2": "J23", "J2": "K23", "M2": "L23", "C3": "B24",
    "D3": "C24", "F3": "D24", "E3": "E24", "G3": "F24",
    "H3": "G24", "I3": "H24", "K3": "I24", "L3": "J24",
    "J3": "K24", "M3": "L24", "C4": "B27", "D4": "C27",
    "F4": "D27", "E4": "E27", "G4": "F27", "H4": "G27",
    "I4": "H27", "K4": "I27", "L4": "J27", "J4": "K27",
    "M4": "L27",
}





mapeamento = {
    "EXCETO INTRA/PODER EXECUTIVO": "PODER EXECUTIVO",
    "vr_rpp_saldo_ant": "Em Exercícios Anteriores (a)",
    "vr_rpp_insc": "Em 31 de dezembro de 2022 (b)",
    "vr_rpp_pag": "Pagos (c)",
    "vr_rpp_anu": "Cancelados (d)",
    "vr_rpp_a_pag": "Saldo e = (a+ b) - (c + d)",
    "vr_rpn_saldo_ant": "Em Exercícios Anteriores (f)",
    "vr_rpn_insc": "Em 31 de dezembro de 2022 (g)",
    "vr_rpn_liq": "Liquidados (h)",
    "vr_rpn_pag": "Pagos (i)",
    "vr_rpn_anu": "Cancelados (j)",
    "vr_rpn_a_pag": "Saldo k = (f + g) - (i + j)",
    "EXCETO INTRA/PODER LEGISLATIVO": "PODER LEGISLATIVO",
}
-------------------------------------------------------------------------------
import xlwings as xw
import os

# Caminho dos arquivos
caminho_xls_origem = 'Relatório 6147 - RP Poder e Órgão.xls'  # Caminho atualizado para o arquivo Excel de origem
caminho_xls_original = 'SICONFI_RREO_3118601_20230104_v11 (3).xls'

# Definindo o caminho para a cópia
nome_arquivo_copia = 'copia_preenchida_SICONFI_RREO.xls'
caminho_pasta = os.path.dirname(caminho_xls_original)
caminho_xls_copia = os.path.join(caminho_pasta, nome_arquivo_copia)

# Abrir o arquivo Excel original (destino)
app = xw.App(visible=False)
wb_destino = app.books.open(caminho_xls_original)
sheet_destino = wb_destino.sheets['RREO-Anexo 07']

# Abrir o arquivo Excel de origem
wb_origem = app.books.open(caminho_xls_origem)
sheet_origem = wb_origem.sheets[0]  # Ajuste se os dados estiverem em outra aba

# Função para converter referência de célula em índices de linha e coluna
# Esta função permanece inalterada, pois é usada para interpretar o mapeamento
def ref_para_indices(ref):
    col_num = 0
    row_part = ''
    for char in ref:
        if char.isdigit():
            row_part += char
        else:
            col_num = col_num * 26 + (ord(char.upper()) - ord('A') + 1)
    row_index = int(row_part) - 1
    col_index = col_num - 1
    return row_index, col_index

mapeamento = {
    "C2": "B23", "D2": "C23", "F2": "D23", "E2": "E23",
    "G2": "F23", "H2": "G23", "I2": "H23", "K2": "I23",
    "L2": "J23", "J2": "K23", "M2": "L23", "C3": "B24",
    "D3": "C24", "F3": "D24", "E3": "E24", "G3": "F24",
    "H3": "G24", "I3": "H24", "K3": "I24", "L3": "J24",
    "J3": "K24", "M3": "L24", "C4": "B27", "D4": "C27",
    "F4": "D27", "E4": "E27", "G4": "F27", "H4": "G27",
    "I4": "H27", "K4": "I27", "L4": "J27", "J4": "K27",
    "M4": "L27",
}


# Transferir dados do Excel de origem para o Excel de destino conforme o mapeamento
for origem, destino in mapeamento.items():
    valor = sheet_origem.range(origem).value
    sheet_destino.range(destino).value = valor

# Salvar como uma nova cópia e fechar ambos os workbooks
wb_destino.save(caminho_xls_copia)
wb_destino.close()
wb_origem.close()
app.quit()


